from aiogram import F, Router
from aiogram.types import Message, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, Message, CallbackQuery
import subprocess

import aiohttp
from app.states import Status as State_Status
import keyboard.status_keyboard as st_kb
from PIL import Image
import os

from playwright.async_api import async_playwright

router = Router()

subprocess.run(["playwright", "install"])

class Status:
    
    __template_map = {
        'first_template': '–ü–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω',
        'second_template': '–í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω',
        'third_template': '–¢—Ä–µ—Ç–∏–π —à–∞–±–ª–æ–Ω',
        'fourth_template': '–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–±–ª–æ–Ω',
        'fifth_template': '–ü—è—Ç—ã–π —à–∞–±–ª–æ–Ω',
        'six_template': '–®–µ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω'
    }
    
    '''
    __file_path = [
        r".\app\status\status_templates\–ø–µ—Ä–≤—ã–π_—à–∞–±–ª–æ–Ω.png",
        r".\app\status\status_templates\–≤—Ç–æ—Ä–æ–π_—à–∞–±–ª–æ–Ω.png",
        r".\app\status\status_templates\—Ç—Ä–µ—Ç–∏–π_—à–∞–±–ª–æ–Ω.png",
        r".\app\status\status_templates\—á–µ—Ç–≤–µ—Ä—Ç—ã–π_—à–∞–±–ª–æ–Ω.png",
        r".\app\status\status_templates\–ø—è—Ç—ã–π_—à–∞–±–ª–æ–Ω.png",
        r".\app\status\status_templates\—à–µ—Å—Ç–æ–π_—à–∞–±–ª–æ–Ω.png"
    ]
    '''
    # –¥–ª—è –¥–æ–∫–µ—Ä–∞
    __file_path = [
        r"./app/status/status_templates/–ø–µ—Ä–≤—ã–π_—à–∞–±–ª–æ–Ω.png",
        r"./app/status/status_templates/–≤—Ç–æ—Ä–æ–π_—à–∞–±–ª–æ–Ω.png",
        r"./app/status/status_templates/—Ç—Ä–µ—Ç–∏–π_—à–∞–±–ª–æ–Ω.png",
        r"./app/status/status_templates/—á–µ—Ç–≤–µ—Ä—Ç—ã–π_—à–∞–±–ª–æ–Ω.png",
        r"./app/status/status_templates/–ø—è—Ç—ã–π_—à–∞–±–ª–æ–Ω.png",
        r"./app/status/status_templates/—à–µ—Å—Ç–æ–π_—à–∞–±–ª–æ–Ω.png"
    ]

    compressed_path = r".\app\status\compressed_templates"
    photo_cache = []  
    
    @staticmethod
    def compress_image(input_path, output_path, quality=70):
        """–§—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        with Image.open(input_path) as img:
            img.save(output_path, "JPEG", quality=quality)

    @staticmethod
    @router.message(F.text.in_(["üì± –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å"]))
    async def handle_status(message: Message, state: FSMContext):
        await state.clear()
        if not Status.photo_cache:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞')

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∂–∞—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(Status.compressed_path):
                os.makedirs(Status.compressed_path)

            compressed_photos = []
            for photo in Status.__file_path:
                compressed_photo = os.path.join(Status.compressed_path, os.path.basename(photo))
                Status.compress_image(photo, compressed_photo)
                compressed_photos.append(FSInputFile(compressed_photo))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            media_group = [
                InputMediaPhoto(media=compressed_photos[0], caption='–ü–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω'),
                InputMediaPhoto(media=compressed_photos[1], caption="–í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω"),
                InputMediaPhoto(media=compressed_photos[2], caption='–¢—Ä–µ—Ç–∏–π —à–∞–±–ª–æ–Ω'),
                InputMediaPhoto(media=compressed_photos[3], caption="–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–±–ª–æ–Ω"),
                InputMediaPhoto(media=compressed_photos[4], caption='–ü—è—Ç—ã–π —à–∞–±–ª–æ–Ω'),
                InputMediaPhoto(media=compressed_photos[5], caption="–®–µ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω")
            ]
            messages = await message.answer_media_group(media_group)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            Status.photo_cache = [msg.photo[-1].file_id for msg in messages]

        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞')

            # –ï—Å–ª–∏ file_id —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
            media_group = [
                InputMediaPhoto(media=file_id, caption=f'–®–∞–±–ª–æ–Ω {index + 1}')
                for index, file_id in enumerate(Status.photo_cache)
            ]
            await message.answer_media_group(media_group)

        await state.set_state(State_Status.choosing_template)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞–º —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—É—Å–∞", reply_markup=await st_kb.Custom_Status_Keyboard().choose_template_first())

    @staticmethod
    @router.callback_query(State_Status.choosing_template, F.data.in_([
        "first_template", "second_template", "third_template", 
        "fourth_template", "fifth_template", "six_template",     
        "forward_template", "back_template"
    ]))
    async def handle_template_choosing(callback: CallbackQuery, state: FSMContext):
        
        if callback.data in Status.__template_map.keys():
            
            selected_template = Status.__template_map[callback.data]
            await state.update_data(choosing_template=selected_template)
            
            await state.set_state(State_Status.first_three_components)
            await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_template}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤–∞—Å!')
            await callback.message.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ 1, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –ù–ï–¢\n\nP.S. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤ —ç—Ç–æ–º –ø–æ–ª–µ, –∫–∞–∫ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ')
            
        elif callback.data == 'forward_template':
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞–º —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—É—Å–∞", 
                reply_markup=await st_kb.Custom_Status_Keyboard().choose_template_second()
            )

        elif callback.data == 'back_template':
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞–º —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—É—Å–∞", 
                reply_markup=await st_kb.Custom_Status_Keyboard().choose_template_first()
            )
            
    # –ª–æ–≤–∏–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞   
    # –µ—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π —à–∞–±–±–ª–æ–Ω, —Ç–æ —Ç–∞–º –±—É–¥–µ—Ç 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    @staticmethod
    @router.message(State_Status.first_three_components)
    async def handle_first_three_components(message: Message, state: FSMContext):
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã
        if '1 —Å—Ç—Ä–æ–∫–∞' not in data:
            await state.update_data({'1 —Å—Ç—Ä–æ–∫–∞': message.text})
            await message.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ 2, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –ù–ï–¢\n\nP.S. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤ —ç—Ç–æ–º –ø–æ–ª–µ, –∫–∞–∫ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ')
        
        elif '2 —Å—Ç—Ä–æ–∫–∞' not in data:
            await state.update_data({'2 —Å—Ç—Ä–æ–∫–∞': message.text})
            await message.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ 3, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –ù–ï–¢\n\nP.S. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤ —ç—Ç–æ–º –ø–æ–ª–µ, –∫–∞–∫ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ')
        
        elif '3 —Å—Ç—Ä–æ–∫–∞' not in data:
            await state.update_data({'3 —Å—Ç—Ä–æ–∫–∞': message.text})
            
            if data['choosing_template'] == '–í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω':
                await message.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ 4, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –ù–ï–¢\n\nP.S. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤ —ç—Ç–æ–º –ø–æ–ª–µ, –∫–∞–∫ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ')
                await state.set_state(State_Status.fourth_component)
            else:
                # –í—Å–µ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                await state.set_state(State_Status.common_components)
                await message.answer('üìê –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã')
    
    # 4 –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–±–ª–æ–Ω–∞        
    @staticmethod
    @router.message(State_Status.fourth_component)
    async def handle_fourth_component(message: Message, state: FSMContext):
        await state.update_data({'4 —Å—Ç—Ä–æ–∫–∞': message.text})
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(State_Status.common_components)
        await message.answer('üìê –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã')
    
    @staticmethod
    @router.message(State_Status.common_components)
    async def handle_common_components(message: Message, state: FSMContext):
        data = await state.get_data()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–ª—é—á–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        if data['choosing_template'] == '–í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω':
            questions = [
                ('–ø–ª–æ—â–∞–¥—å', 'üõå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω'),
                ('—Å–ø–∞–ª—å–Ω–∏', 'üè¨ –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂'),
                ('—ç—Ç–∞–∂', 'ü™ú –í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ—Ç–æ–ª–∫–∞'),
                ('–ø–æ—Ç–æ–ª–æ–∫', 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 120 000 000'),
                ('—Ü–µ–Ω–∞', 'üéÅ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 120 000 000, –µ—Å–ª–∏ –æ–Ω–∞ –£–ö–ê–ó–ê–ù–ê –≤ —à–∞–±–ª–æ–Ω–µ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –ù–ï–¢'), 
                ('—Å–∫–∏–¥–æ—á–Ω–∞—è_—Ü–µ–Ω–∞', '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ'), 
            ]
            next_state = State_Status.photo
        else:
            questions = [
                ('–ø–ª–æ—â–∞–¥—å', 'üõå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω'),
                ('—Å–ø–∞–ª—å–Ω–∏', 'üöª –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤'),
                ('—Å–∞–Ω—É–∑–ª—ã', 'üè¨ –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂'),
                ('—ç—Ç–∞–∂', 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 120 000 000'),
                ('—Ü–µ–Ω–∞', 'üéÅ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 120 000 000, –µ—Å–ª–∏ –æ–Ω–∞ –£–ö–ê–ó–ê–ù–ê –≤ —à–∞–±–ª–æ–Ω–µ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –ù–ï–¢'), 
                ('—Å–∫–∏–¥–æ—á–Ω–∞—è_—Ü–µ–Ω–∞', '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ'), 
            ]
            next_state = State_Status.photo

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for key, question in questions:
            if key not in data:
                if key == '—Ü–µ–Ω–∞' or key == '—Å–∫–∏–¥–æ—á–Ω–∞—è_—Ü–µ–Ω–∞':
                    # Validate price input
                    price_text = message.text.replace(' ', '')  # Remove spaces
                    if not price_text.isdigit() and key == '—Ü–µ–Ω–∞':
                        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 120000000.")
                        return  # Wait for the next response
                    
                    if key == '—Ü–µ–Ω–∞':
                    # If valid, update state with price
                        await state.update_data({key: int(price_text)})
                    elif key == '—Å–∫–∏–¥–æ—á–Ω–∞—è_—Ü–µ–Ω–∞':
                        await state.update_data({key: price_text})    
                else:
                    await state.update_data({key: message.text})
                
                await message.answer(question)
                
                if question == '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ':
                    if data['choosing_template'] == '–ü—è—Ç—ã–π —à–∞–±–ª–æ–Ω':
                        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ 2 —Ñ–æ—Ç–æ –ü–û–û–ß–ï–†–ï–î–ù–û –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –Ω–∞ —à–∞–±–ª–æ–Ω–µ.\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –û–î–ù–û —Ñ–æ—Ç–æ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ')
                    else:
                        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ 4 —Ñ–æ—Ç–æ –ü–û–û–ß–ï–†–ï–î–ù–û –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –Ω–∞ —à–∞–±–ª–æ–Ω–µ.\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –û–î–ù–û —Ñ–æ—Ç–æ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ')
                    
                    await state.set_state(next_state)
                    
                return  # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç
                
    @router.message(State_Status.photo, F.photo)
    async def handle_template_photo_from_user(message: Message, state: FSMContext):
        
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
        photos = data.get('photos', [])
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        file_path = file_info.file_path
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        photo_number = len(photos) + 1
        save_path = f'.\\status\\to_server\\photo_{photo_number}_{message.from_user.id}.jpg'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await message.bot.download_file(file_path, save_path)
        photos.append(save_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ FastAPI —Å–µ—Ä–≤ # –í–∞—à FastAPI —Å–µ—Ä–≤–µ—Ä
    
        data_for_server = {
            'photo_number': str(photo_number),
            'user_id': str(message.from_user.id)
        }
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        with open(save_path, 'rb') as file:
            form_data = aiohttp.FormData()
            form_data.add_field('photo_number', str(photo_number))
            form_data.add_field('user_id', str(message.from_user.id))
            form_data.add_field('file', file, filename=f'photo_{photo_number}.jpg', content_type='image/jpeg')

            url = 'https://deil-server-2c040b241127.herokuapp.com/generation/upload_photo'

            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=form_data) as response:
                    if response.status == 200:
                        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:", await response.json())
                    else:
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", response.status, await response.text())
                        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(photos=photos)
        
        if data['choosing_template'] == '–ü—è—Ç—ã–π —à–∞–±–ª–æ–Ω':
            if len(photos) < 2:
                await message.answer(f"–§–æ—Ç–æ {photo_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.")
            else:
                await message.answer("–í—Å–µ 2 —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                await state.set_state(State_Status.create_template)
                await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è", reply_markup=await st_kb.Custom_Status_Keyboard().get_template())
        
        else:  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            if len(photos) < 4:
                await message.answer(f"–§–æ—Ç–æ {photo_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.")
            else:
                await message.answer("–í—Å–µ 4 —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                await state.set_state(State_Status.create_template)
                await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚åõÔ∏è", reply_markup=await st_kb.Custom_Status_Keyboard().get_template())
    @staticmethod
    async def post_request_to_api(data_dict, api_url, telegram_id, session: aiohttp.ClientSession) -> None:
        print(data_dict)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data_for_server = {
            "user_id": telegram_id,
            "first_area": data_dict['1 —Å—Ç—Ä–æ–∫–∞'],
            "second_area": data_dict['2 —Å—Ç—Ä–æ–∫–∞'],
            "third_area": data_dict['3 —Å—Ç—Ä–æ–∫–∞'],
            "area": data_dict['–ø–ª–æ—â–∞–¥—å'],
            "bedroom": data_dict['—Å–ø–∞–ª—å–Ω–∏'],
            "floor": data_dict['—ç—Ç–∞–∂'],
            "price": data_dict['—Ü–µ–Ω–∞'],
            "sales_price": data_dict['—Å–∫–∏–¥–æ—á–Ω–∞—è_—Ü–µ–Ω–∞'],
            "path": data_dict['photos']
        }
        
        if 'all' in api_url:
            data_for_server['restroom'] = int(data_dict['—Å–∞–Ω—É–∑–ª—ã'])
            
        else:
            
            data_for_server["fourth_area"] = data_dict['4 —Å—Ç—Ä–æ–∫–∞']
            
            data_for_server["ceiling"] = int(data_dict['–ø–æ—Ç–æ–ª–æ–∫'])
        
        # POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        async with session.post(api_url, json=data_for_server) as response:
            if response.status == 200:
                print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:", await response.json())
            else:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", response.status, await response.text())
    
    @staticmethod
    async def take_screenshot(url: str, user_id):
        
        async with async_playwright() as p:
            browser = await p.chromium.launch()
            page = await browser.new_page()

            # Open the target website
            await page.goto(url)

            # Take a screenshot of the web page
            await page.screenshot(path=f".\\status\\template_screenshots\\screenshot_{user_id}.png", full_page=True)

            # Close the browser instance
            await browser.close()
    
    @staticmethod
    async def save_image_from_url_template(user_id, state: FSMContext):
        
        data = await state.get_data()
        
        common_endpoint = 'https://deil-server-2c040b241127.herokuapp.com/pages/'
        
        if data['choosing_template'] == '–¢—Ä–µ—Ç–∏–π —à–∞–±–ª–æ–Ω':
            
            image_url = f'{common_endpoint}third_template?user_id={user_id}&template=first'
            
        elif data['choosing_template'] == '–í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω':
            
            image_url = f'{common_endpoint}second_template?user_id={user_id}&template=second'
        
        elif data['choosing_template'] == '–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–±–ª–æ–Ω':
            
            image_url = f'{common_endpoint}fourth_template?user_id={user_id}&template=first'
        
        elif data['choosing_template'] == '–ü–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω':
            
            image_url = f'{common_endpoint}first_template?user_id={user_id}&template=first'
        
        elif data['choosing_template'] == '–ü—è—Ç—ã–π —à–∞–±–ª–æ–Ω':
            
            image_url = f'{common_endpoint}fifth_template?user_id={user_id}&template=first'
        
        elif data['choosing_template'] == '–®–µ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω':
            
            image_url = f'{common_endpoint}six_template?user_id={user_id}&template=first'
        
        try:
            await Status.take_screenshot(image_url, user_id=user_id)
        
            print({"status": "success", "message": "Image generated successfully."})
        except Exception as e:
            print(e)
            
    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞—Ö—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Aiogram
    @staticmethod
    @router.callback_query(State_Status.create_template, F.data == 'get_template')
    async def handle_post_request(call: CallbackQuery, state: FSMContext) -> None:
        
        data = await state.get_data()
        
        print(data['choosing_template'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL
        if data['choosing_template'] == '–í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω':
            
            api_url = "https://deil-server-2c040b241127.herokuapp.com/generation/api/add_data"
        else:
            api_url = "https://deil-server-2c040b241127.herokuapp.com/generation/api/add_data/all"

        async with aiohttp.ClientSession() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await Status.post_request_to_api(data_dict=data, api_url=api_url, telegram_id=call.from_user.id, session=session)

            await Status.save_image_from_url_template(user_id=call.from_user.id, state=state)
        
        user_id = call.from_user.id
        
        output_image_path = f".\\status\\template_screenshots\\screenshot_{user_id}.png"
        
        await call.message.answer_photo(
                    FSInputFile(path=output_image_path), caption="–í–∞—à —Å—Ç–∞—Ç—É—Å ‚ù§Ô∏è"
        )
        
        await state.clear()
        
        if not Status.photo_cache:
            await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ')

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∂–∞—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(Status.compressed_path):
                os.makedirs(Status.compressed_path)

            compressed_photos = []
            for photo in Status.__file_path:
                compressed_photo = os.path.join(Status.compressed_path, os.path.basename(photo))
                Status.compress_image(photo, compressed_photo)
                compressed_photos.append(FSInputFile(compressed_photo))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            media_group = [
                InputMediaPhoto(media=compressed_photos[0], caption='–ü–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω'),
                InputMediaPhoto(media=compressed_photos[1], caption="–í—Ç–æ—Ä–æ–π —à–∞–±–ª–æ–Ω"),
                InputMediaPhoto(media=compressed_photos[2], caption='–¢—Ä–µ—Ç–∏–π —à–∞–±–ª–æ–Ω'),
                InputMediaPhoto(media=compressed_photos[3], caption="–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–±–ª–æ–Ω"),
                InputMediaPhoto(media=compressed_photos[4], caption='–ü—è—Ç—ã–π —à–∞–±–ª–æ–Ω'),
                InputMediaPhoto(media=compressed_photos[5], caption="–®–µ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω")
            ]
            messages = await call.message.answer_media_group(media_group)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            Status.photo_cache = [msg.photo[-1].file_id for msg in messages]

        else:
            await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞')

            # –ï—Å–ª–∏ file_id —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
            media_group = [
                InputMediaPhoto(media=file_id, caption=f'–®–∞–±–ª–æ–Ω {index + 1}')
                for index, file_id in enumerate(Status.photo_cache)
            ]
            await call.message.answer_media_group(media_group)

        await state.set_state(State_Status.choosing_template)
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞–º —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—É—Å–∞", reply_markup=await st_kb.Custom_Status_Keyboard().choose_template_first())