from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from app.states import UserState
import keyboard.keyboard as kb
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_get_user_balance, orm_update_users_balance, orm_add_action_with_top_up
from config_reader import config

balance_router = Router()
PAYMENT_TOKEN_TEST = config.payment_token_test.get_secret_value()

class BalanceHandler:

    @staticmethod
    @balance_router.message(F.text.in_(["üí∏ –ë–∞–ª–∞–Ω—Å"]))
    async def handle_balance(message: Message, state: FSMContext, session: AsyncSession):
        current_state = await state.get_state()

        constructor_states = [
            UserState.number_of_rooms,
            UserState.renovation_status,
            UserState.waiting_for_room_count,
            UserState.style,
            UserState.info_about_renovation,
            UserState.kitchen_living_room,
            UserState.info_about_kitchen_living_room,
            UserState.number_of_closet,
            UserState.number_of_bedrooms,
            UserState.waiting_for_bedrooms_count,
            UserState.info_bed,
            UserState.bedroom_area,
            UserState.bedroom_wc,
            UserState.bedroom_type,
            UserState.bedroom_view,
            UserState.bedroom_details,
            UserState.flat_view,
            UserState.flat_area,
            UserState.price,
            UserState.price_int,
            UserState.flat_details,
            UserState.link_house,
            UserState.jk_info_yes_or_no,
            UserState.jk_extra_info,
            UserState.jk_written_info,
            UserState.info_about_extra_rooms,
            UserState.flat_extra_info,
            UserState.deal_term,
            UserState.description_ready
        ]
        
        if current_state in constructor_states:
            await message.answer(f'‚ö†Ô∏è –í–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ù–ï–õ–¨–ó–Ø –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n–í—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!!!!\n\n–ë–æ—Ç —Å–∞–º –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å üí∞ –ë–∞–ª–∞–Ω—Å\n–ï—Å–ª–∏ –≤—ã —Å–∞–º–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è ‚ù§Ô∏è')
            
            data = await state.get_data()
            last_question = data.get('last_question', None)
            last_keyboard = data.get('last_keyboard', None)

            if last_question:
                if last_keyboard:
                    await message.answer(last_question, reply_markup=last_keyboard)
                else:
                    await message.answer(last_question)
            
            await state.set_state(current_state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        else:
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º
            balance = await orm_get_user_balance(session, message.from_user.id)
            await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {balance} —Ä—É–±. –•–æ—Ç–µ–ª–∏ –±—ã –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?', 
                                parse_mode='Markdown',
                                reply_markup=await kb.Custom_Keyboard().upprove_balance())

    @staticmethod
    async def add_balance(call: CallbackQuery, amount: int):
        await call.bot.send_invoice(
            chat_id=call.from_user.id,
            title='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
            description='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
            provider_token=PAYMENT_TOKEN_TEST,
            payload='add_balance',
            currency='rub',
            prices=[
                LabeledPrice(
                    label=f'–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} —Ä—É–±–ª–µ–π',
                    amount=amount * 100
                )
            ],
            start_parameter='People_test',
            need_phone_number=False
        )

    @staticmethod
    @balance_router.pre_checkout_query()
    async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    @staticmethod
    @balance_router.message(F.successful_payment)
    async def successful_payment_handler(message: Message, session: AsyncSession, state: FSMContext):
        
        amount = message.successful_payment.total_amount // 100
        user_id = message.from_user.id
        balance_from_db = await orm_get_user_balance(session, user_id)
        current_balance = balance_from_db + amount
        await orm_update_users_balance(session=session, current_balance=current_balance, user_id=user_id)
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {current_balance} —Ä—É–±.\n–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?', 
                            reply_markup=await kb.Custom_Keyboard().upprove_balance())
        await orm_add_action_with_top_up(session=session, user_id=user_id, user_name=message.from_user.username, action=f'–ü–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ +{amount}', top_up_amount=amount)

    @staticmethod
    @balance_router.callback_query(F.data.in_(["yes_balance", "no_balance"]))
    async def handle_grow_balance(call_query: CallbackQuery, session: AsyncSession):

        if call_query.data == 'yes_balance':
            await call_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–µ–Ω–∏—è', reply_markup=await kb.Custom_Keyboard().amount_of_top_up())
        elif call_query.data == 'no_balance':
            await call_query.message.answer('–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!')

    @staticmethod
    @balance_router.callback_query(F.data.in_(["150_rub", "100_rub", "500_rub", "later"]))
    async def handle_amount_top_up(call_query: CallbackQuery, session: AsyncSession, state: FSMContext):

        if call_query.data == '150_rub':
            await BalanceHandler.add_balance(call_query, amount=150)
        elif call_query.data == '100_rub':
            await BalanceHandler.add_balance(call_query, amount=100)
        elif call_query.data == '500_rub':
            await BalanceHandler.add_balance(call_query, amount=500)
        elif call_query.data == 'later':
            balance = await orm_get_user_balance(session, call_query.from_user.id)
            await call_query.message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {balance} —Ä—É–±. –•–æ—Ç–µ–ª–∏ –±—ã –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?', 
                                            parse_mode='Markdown',
                                            reply_markup=await kb.Custom_Keyboard().upprove_balance())
