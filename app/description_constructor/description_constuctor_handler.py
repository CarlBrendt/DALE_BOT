from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import Command
from app.states import UserState
from aiogram.fsm.context import FSMContext
import keyboard.keyboard as kb
import asyncio
import re
from config_reader import config
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from app.description_constructor.description_with_gpt import create_unique_description_of_building # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è gpt
from app.description_constructor.description_with_gpt import create_description_of_flat
from database.orm_query import orm_add_action_with_top_up, orm_get_user_balance, orm_register_or_update_user, orm_update_users_balance
from app.balance_constructor.balance_handlers import BalanceHandler


router = Router()

PAYMENT_TOKEN_TEST = config.payment_token_test.get_secret_value()
SUPPORT_CHAT_ID = int(config.support_chat_id.get_secret_value())

class DescriptionConstructorHandler:
    
    @staticmethod
    async def uniquely_describe_building(info: str, extra_info: str, state: FSMContext):
        try:
            if not info:
                unique_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ñ–ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞."
            else:
                unique_text = await create_unique_description_of_building(info, extra_info)
            await state.update_data(unique_description_of_building=unique_text)
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ –ñ–ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ FSM: {unique_text}")
        except Exception as e:
            await state.update_data(unique_description_of_building=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö: {str(e)}")

    @staticmethod
    async def create_unique_description_of_flat(flat_info: str, jk_info: str, state: FSMContext):
        try:
            flat_text = await create_description_of_flat(flat_info, jk_info)
            await state.update_data(flat_text=flat_text)
            await state.set_state(UserState.description_ready)
            print("–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ FSM")
        except Exception as e:
            await state.update_data(flat_text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã: {str(e)}")

    # –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
    @staticmethod
    async def collect_info_from_fsm(state: FSMContext):
        data = await state.get_data()
        responses = [
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('number_of_rooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞: {data.get('renovation_status', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–°—Ç–∏–ª—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('style', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–†–µ–º–æ–Ω—Ç –∏ –º–µ–±–µ–ª—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('info_about_renovation', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π: {data.get('kitchen_living_room', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ö–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π: {data.get('info_about_kitchen_living_room', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤: {data.get('number_of_closet', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: {data.get('number_of_bedrooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
        ]

        if data.get('number_of_bedrooms', 0) > 0:
            bed_count = int(data.get('number_of_bedrooms', 0))
            bedrooms_info = [
                f"–°–ø–∞–ª—å–Ω—è {i + 1}: –°–∞–Ω—É–∑–µ–ª - {data.get(f'bedroom_{i+1}_wc', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n, –¢–∏–ø - {data.get(f'bedroom_{i+1}_type', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n, –í–∏–¥ –∏–∑ —Å–ø–∞–ª—å–Ω–∏ - {data.get(f'bedroom_{i+1}_view', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                for i in range(bed_count)
            ]
            responses.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞–ª—å–Ω—è—Ö:\n" + "\n".join(bedrooms_info))
        else:
            responses.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞–ª—å–Ω—è—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞.\n")
        responses.extend([
            f"–í–∏–¥—ã –∏–∑ –æ–∫–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_view', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_area', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–í–∞–ª—é—Ç–∞ —Ü–µ–Ω—ã: {data.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–¶–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('price_int', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∏ –ø–ª—é—Å—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_details', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('info_about_extra_rooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('flat_extra_info', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ –∂–∫: {data.get('unique_description_of_building', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏: {data.get('deal_term', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        ])
        
        flat_info = "\n".join(responses)  # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
        jk_info = responses[-2]  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ñ–ö
        return flat_info, jk_info  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞

    # –•–µ–Ω–¥–ª–µ—Ä –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –≤–∏–¥–µ–æ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    @staticmethod
    @router.message(F.text.in_(["‚öôÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ"]))
    async def handle_catch_cian(message: Message, state: FSMContext, session: AsyncSession):
        await orm_register_or_update_user(session, message.from_user.id, message.from_user.username)
        balance = await orm_get_user_balance(session, message.from_user.id)
        if message.text == "‚öôÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã":
            if balance>=0:
                await state.clear()
                await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º –∫—Ä–∞—Å–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–ø–∏—Å–∞–Ω–∏—èüí´\n\n*NOTE:*\n–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –¢–û–õ–¨–ö–û –≤ —ç—Ç–æ —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–ª–∏ —Ä–∞–Ω–µ–µ.\n–î–ª—è —ç—Ç–æ–≥–æ –≤ –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º /status\n\n–î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –ù–ê–ñ–ú–ò–¢–ï –î–ê–õ–ï–ï', 
                                    parse_mode='Markdown',
                                    reply_markup=await kb.Custom_Keyboard().agree_keyboard())
            else:
                await message.answer('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 100 —Ä—É–±–ª–µ–π!', 
                                    parse_mode='Markdown')
        elif message.text == '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ':
            await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å')
        
    # –õ–æ–≤–∏–º —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    @staticmethod
    @router.callback_query(F.data.in_(['I_agree']))
    async def handle_agreement(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ', reply_markup=await kb.Custom_Keyboard().rooms_select_keyboard())
        await state.set_state(UserState.number_of_rooms)
        await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().rooms_select_keyboard())

    # –õ–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ FSM
    @staticmethod
    @router.callback_query(UserState.number_of_rooms, F.data.in_(['one_room', 'two_rooms', 'three_rooms', 'many_rooms', 'empty', 'studio', 'rooms_backs']))
    async def handle_number_of_rooms(callback: CallbackQuery, state: FSMContext):
        room_map = {
            'one_room': '1 –∫–æ–º–Ω–∞—Ç–∞',
            'two_rooms': '2 –∫–æ–º–Ω–∞—Ç—ã',
            'three_rooms': '3 –∫–æ–º–Ω–∞—Ç—ã'
        }
        if callback.data in room_map:
            await state.update_data(number_of_rooms=room_map[callback.data])
            await state.set_state(UserState.renovation_status)
            await state.update_data(last_question='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().select_renovation_keyboard())
            await callback.message.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?', reply_markup=await kb.Custom_Keyboard().select_renovation_keyboard())
        
        elif callback.data == 'many_rooms':
            await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –∫–æ–º–Ω–∞—Ç\n –§–æ—Ä–º–∞—Ç –∏ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 6\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.set_state(UserState.waiting_for_room_count)
            await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –∫–æ–º–Ω–∞—Ç\n –§–æ—Ä–º–∞—Ç –∏ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 6\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
        elif callback.data == 'empty':
            await state.update_data(number_of_rooms='–í –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞')
            await state.set_state(UserState.flat_view)
            await state.update_data(last_question='–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—É—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
            await callback.message.answer('–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—É—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        elif callback.data == 'studio':
            await state.update_data(number_of_rooms='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å—Ç—É–¥–∏—è')
            await state.set_state(UserState.renovation_status)
            await state.update_data(last_question='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().select_renovation_keyboard())
            await callback.message.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?', reply_markup=await kb.Custom_Keyboard().select_renovation_keyboard())
        
        elif callback.data == "rooms_backs":
            await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º –∫—Ä–∞—Å–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', 
                                            reply_markup=await kb.Custom_Keyboard().agree_keyboard())
            await state.clear()

    # –õ–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
    @staticmethod
    @router.message(UserState.waiting_for_room_count)
    async def handle_room_count(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        room_count = message.text
        await state.update_data(number_of_rooms=f'{room_count} –∫–æ–º–Ω–∞—Ç')
        await state.set_state(UserState.renovation_status)
        await state.update_data(last_question='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().select_renovation_keyboard())
        await message.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?', reply_markup=await kb.Custom_Keyboard().select_renovation_keyboard())

    @staticmethod
    @router.callback_query(UserState.renovation_status, F.data.in_(['with_renovation', 'no_renovation', 'renovation_backs']))
    async def handle_renovation_status(callback: CallbackQuery, state: FSMContext):
        if callback.data == 'with_renovation':
            await state.update_data(renovation_status='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π')
            await state.set_state(UserState.style)
            await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞\n\n–ü—Ä–∏–º–µ—Ä—ã:\n1 –ø—Ä–∏–º–µ—Ä - –º–æ–¥–µ—Ä–Ω\n2 –ø—Ä–∏–º–µ—Ä - –º–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å—Ç–∏–ª–µ eclectic\n3 –ø—Ä–∏–º–µ—Ä - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
            await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞\n\n–ü—Ä–∏–º–µ—Ä—ã:\n1 –ø—Ä–∏–º–µ—Ä - –º–æ–¥–µ—Ä–Ω\n2 –ø—Ä–∏–º–µ—Ä - –º–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å—Ç–∏–ª–µ eclectic\n3 –ø—Ä–∏–º–µ—Ä - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        elif callback.data == 'no_renovation':
            await state.update_data(renovation_status='–ö–≤–∞—Ä—Ç–∏—Ä–∞ –±–µ–∑ –æ—Ç–¥–µ–ª–∫–∏')
            data = await state.get_data()
            if data['number_of_rooms'] != '–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å—Ç—É–¥–∏—è':
                await state.set_state(UserState.kitchen_living_room)
                await state.update_data(last_question='–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π?')
                await state.update_data(last_keyboard=await kb.Custom_Keyboard().kitchen_with_living_room_keyboard())
                await callback.message.answer('–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π?', reply_markup=await kb.Custom_Keyboard().kitchen_with_living_room_keyboard())
            else:
                await state.set_state(UserState.flat_view)
                await state.update_data(last_question='–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
                await state.update_data(last_keyboard=None)
                await callback.message.answer('–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        
        elif callback.data == 'renovation_backs':
            await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ', reply_markup=await kb.Custom_Keyboard().rooms_select_keyboard())
            await state.set_state(UserState.number_of_rooms)
            await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().rooms_select_keyboard())
            
    @staticmethod
    @router.message(UserState.style)
    async def handle_style(message: Message, state: FSMContext, session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(style=f"–°—Ç–∏–ª—å –∫–≤–∞—Ä—Ç–∏—Ä—ã {message.text}")
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ä–µ–º–æ–Ω—Ç–µ/–º–µ–±–µ–ª–∏ –í–û –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ\n\n–ü—Ä–∏–º–µ—Ä 1 - –ø–∞—Ä–∫–µ—Ç –∏–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ –¥—É–±–∞, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –º–µ–±–µ–ª—å —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n–ü—Ä–∏–º–µ—Ä 2 - –æ—Ç–¥–µ–ª–∫–∞ –ø–æ—Ç–æ–ª–∫–∞ –∏ –ø–æ–ª–∞ –≤ —Å—Ç–∏–ª–µ LV, –Ω–∞–¥ –¥–∏–∑–∞–π–Ω–æ–º —Ä–∞–±–æ—Ç–∞–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —è–ø–æ–Ω—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.set_state(UserState.info_about_renovation)
        await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ä–µ–º–æ–Ω—Ç–µ/–º–µ–±–µ–ª–∏ –í–û –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ\n\n–ü—Ä–∏–º–µ—Ä 1 - –ø–∞—Ä–∫–µ—Ç –∏–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ –¥—É–±–∞, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –º–µ–±–µ–ª—å —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n–ü—Ä–∏–º–µ—Ä 2 - –æ—Ç–¥–µ–ª–∫–∞ –ø–æ—Ç–æ–ª–∫–∞ –∏ –ø–æ–ª–∞ –≤ —Å—Ç–∏–ª–µ LV, –Ω–∞–¥ –¥–∏–∑–∞–π–Ω–æ–º —Ä–∞–±–æ—Ç–∞–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —è–ø–æ–Ω—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.update_data(last_keyboard=None)
    # –õ–æ–≤–∏–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–º–æ–Ω—Ç–µ –≤–æ –≤—Å–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ
    @staticmethod
    @router.message(UserState.info_about_renovation)
    async def handle_description_of_renovation(message: Message, state: FSMContext, session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(info_about_renovation=f"–†–µ–º–æ–Ω—Ç –∏ –º–µ–±–µ–ª—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ {message.text}")
        data = await state.get_data()
        if data['number_of_rooms']!='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å—Ç—É–¥–∏—è':
            await state.set_state(UserState.kitchen_living_room)
            await state.update_data(last_question='–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().kitchen_with_living_room_keyboard())
            await message.answer('–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π?', reply_markup=await kb.Custom_Keyboard().kitchen_with_living_room_keyboard())
        else:
            await state.set_state(UserState.flat_view)
            await state.update_data(last_question='–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
            await message.answer('–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
    
    # –õ–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å —Å–æ–≤–º–µ—â–µ–Ω–∏—è –∫—É—Ö–Ω–∏ —Å –≥–æ—Å—Ç–∏–Ω–æ–π
    @staticmethod
    @router.callback_query(UserState.kitchen_living_room, F.data.in_(['yes_single_room', 'no_single_room', 'single_room_back']))
    async def handle_kitchen_with_living_room_status(callback: CallbackQuery, state: FSMContext):
        if callback.data == 'yes_single_room':
            await state.update_data(kitchen_living_room='–í –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å–æ–≤–º–µ—â–µ–Ω—ã –∫—É—Ö–Ω—è –∏ –≥–æ—Å—Ç–∏–Ω–∞—è')
        elif callback.data == 'no_single_room':
            await state.update_data(kitchen_living_room='–ö—É—Ö–Ω—è –∏ –≥–æ—Å—Ç–∏–Ω–∞—è –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã')
        elif callback.data == 'single_room_back':
            await state.set_state(UserState.renovation_status)
            await state.update_data(last_question='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().select_renovation_keyboard())
            await callback.message.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π –∏–ª–∏ –±–µ–∑?', reply_markup=await kb.Custom_Keyboard().select_renovation_keyboard())
            return
        
        data = await state.get_data()
        
        if data['renovation_status']=='–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç–¥–µ–ª–∫–æ–π':

            await state.set_state(UserState.info_about_kitchen_living_room)
            await state.update_data(last_question='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–µ—Ç–∞–ª—è—Ö –∫—É—Ö–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–ª–æ—â–∞–¥—å\n\n–ü—Ä–∏–º–µ—Ä 1 - –í –∫—É—Ö–Ω–µ –µ—Å—Ç—å –ø–æ—Å—É–¥–æ–º–æ–π–∫–∏ –æ—Ç Bosh , –≥–æ—Å—Ç–∏–Ω–∞—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–±–µ–ª–∏—Ä–æ–≤–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –ü–ª–æ—â–∞–¥—å –≥–æ—Å—Ç–∏–Ω–æ–π - 20 –º2 , –µ—Å—Ç—å –Ω–∏—à–∞ –ø–æ–¥ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä\n–ü—Ä–∏–º–µ—Ä 3 - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
            await callback.message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–µ—Ç–∞–ª—è—Ö –∫—É—Ö–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–ª–æ—â–∞–¥—å\n\n–ü—Ä–∏–º–µ—Ä 1 - –í –∫—É—Ö–Ω–µ –µ—Å—Ç—å –ø–æ—Å—É–¥–æ–º–æ–π–∫–∏ –æ—Ç Bosh , –≥–æ—Å—Ç–∏–Ω–∞—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–±–µ–ª–∏—Ä–æ–≤–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –ü–ª–æ—â–∞–¥—å –≥–æ—Å—Ç–∏–Ω–æ–π - 20 –º2 , –µ—Å—Ç—å –Ω–∏—à–∞ –ø–æ–¥ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä\n–ü—Ä–∏–º–µ—Ä 3 - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        else:
            await state.set_state(UserState.number_of_closet)
            await state.update_data(last_question='–°–∫–æ–ª—å–∫–æ —Å–∞–Ω—É–∑–ª–æ–≤ –≤–æ –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().wc_select_keyboard())
            await callback.message.answer('–°–∫–æ–ª—å–∫–æ —Å–∞–Ω—É–∑–ª–æ–≤ –≤–æ –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ?', reply_markup=await kb.Custom_Keyboard().wc_select_keyboard())

    
    # –õ–æ–≤–∏–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Å—Ç–∏–Ω–æ–π –∏ –∫—É—Ö–Ω–Ω–µ, –∏—Ö —Ä–µ–º–æ–Ω—Ç–µ –∏ –ø–ª–æ—â–∞–¥–∏
    @staticmethod
    @router.message(UserState.info_about_kitchen_living_room)
    async def handle_description_of_kitchen_and_living_room(message: Message, state: FSMContext, session:AsyncSession):
        
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(info_about_kitchen_living_room=f"–†–µ–º–æ–Ω—Ç –∏ –º–µ–±–µ–ª—å –≤ –≥–æ—Å—Ç–∏–Ω–æ–π –∏ –∫—É—Ö–Ω–µ {message.text}")
        
        await state.set_state(UserState.number_of_closet)
        await state.update_data(last_question='–°–∫–æ–ª—å–∫–æ —Å–∞–Ω—É–∑–ª–æ–≤ –≤–æ –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ?')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().wc_select_keyboard())
        await message.answer('–°–∫–æ–ª—å–∫–æ —Å–∞–Ω—É–∑–ª–æ–≤ –≤–æ –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ?', reply_markup=await kb.Custom_Keyboard().wc_select_keyboard())


    @staticmethod
    # –õ–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ FSM
    @router.callback_query(UserState.number_of_closet, F.data.in_(['one_wc', 'two_wc', 'three_wc', 'many_wc', 'wc_backs']))
    async def handle_number_of_closets(callback: CallbackQuery, state: FSMContext):
        wc_map = {
            'one_wc': '1 —Å–∞–Ω—É–∑–µ–ª',
            'two_wc': '2 —Å–∞–Ω—É–∑–ª–∞',
            'three_wc': '3 —Å–∞–Ω—É–∑–ª–∞'
        }
        if callback.data in wc_map:
            await state.update_data(number_of_closet=f"–í –∫–≤–∞—Ä—Ç–∏—Ä–µ {wc_map[callback.data]}")
            await callback.message.answer('–°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ?',reply_markup=await kb.Custom_Keyboard().bedroom_select_keyboard())
            await state.set_state(UserState.number_of_bedrooms)
            await state.update_data(last_question='–°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().bedroom_select_keyboard())
        elif callback.data == 'many_wc':
            await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å–∞–Ω—É–∑–ª–æ–≤\n–§–æ—Ä–º–∞—Ç –∏ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 6\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–• !!')
            await state.set_state(UserState.waiting_for_closet_count)
            await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å–∞–Ω—É–∑–ª–æ–≤\n–§–æ—Ä–º–∞—Ç –∏ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 6\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
        elif callback.data == "wc_backs":
            await callback.message.answer('–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π?', reply_markup=await kb.Custom_Keyboard().kitchen_with_living_room_keyboard())
            await state.set_state(UserState.kitchen_living_room)
            await state.update_data(last_question='–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().kitchen_with_living_room_keyboard())

    # –õ–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–Ω—É–∑–ª–æ–≤
    @staticmethod
    @router.message(UserState.waiting_for_closet_count)
    async def handle_closet_count(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        wc_count = message.text
        await state.update_data(number_of_closet=f'–í –∫–≤–∞—Ä—Ç–∏—Ä–µ {wc_count} —Å–∞–Ω—É–∑–ª–æ–≤')
        await state.set_state(UserState.number_of_bedrooms) # –≥–æ–≤–æ—Ä–∏–º —á—Ç–æ —Å–µ–π—á–∞—Å –±—É–¥–µ–º –ª–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö —Å–ø–∞–ª—å–Ω–µ–π
        await state.update_data(last_question='–°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ?')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().bedroom_select_keyboard())
        await message.answer('–°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ?',reply_markup=await kb.Custom_Keyboard().bedroom_select_keyboard())

    # –õ–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ FSM
    @staticmethod
    @router.callback_query(UserState.number_of_bedrooms, F.data.in_(['one_bed', 'two_bed', 'three_bed', 'many_bed', 'bed_backs']))
    async def handle_number_of_bedrooms(callback: CallbackQuery, state: FSMContext):
        bed_map = {
            'one_bed': '1 —Å–ø–∞–ª—å–Ω—è',
            'two_bed': '2 —Å–ø–∞–ª—å–Ω–∏',
            'three_bed': '3 —Å–ø–∞–ª—å–Ω–∏'
        }
        if callback.data in bed_map:
            await state.update_data(number_of_bedrooms=int(bed_map[callback.data].split()[0]))
            await state.update_data(current_bed=1)
            await state.set_state(UserState.info_bed)
            await state.update_data(last_question='–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–ê–ñ–î–û–ô —Å–ø–∞–ª—å–Ω–µ')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().agree_keyboard_about_bed())
            await callback.message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–ê–ñ–î–û–ô —Å–ø–∞–ª—å–Ω–µ', reply_markup=await kb.Custom_Keyboard().agree_keyboard_about_bed())
        elif callback.data == 'many_bed':
            await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å–ø–∞–ª–µ–Ω\n–§–æ—Ä–º–∞—Ç –∏ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 6\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.set_state(UserState.waiting_for_bedrooms_count)
            await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å–ø–∞–ª–µ–Ω\n–§–æ—Ä–º–∞—Ç –∏ –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 6\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
        elif callback.data == "bed_backs":
            await callback.message.answer('–°–∫–æ–ª—å–∫–æ —Å–∞–Ω—É–∑–ª–æ–≤ –≤–æ –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ?', reply_markup=await kb.Custom_Keyboard().wc_select_keyboard())
            await state.set_state(UserState.number_of_closet)
            await state.update_data(last_question='–°–∫–æ–ª—å–∫–æ —Å–∞–Ω—É–∑–ª–æ–≤ –≤–æ –í–°–ï–ô –∫–≤–∞—Ä—Ç–∏—Ä–µ?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().wc_select_keyboard())
            await state.update_data(last_keyboard=None)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    @staticmethod
    @router.message(UserState.waiting_for_bedrooms_count)
    async def handle_bedroom_count(message: Message, state: FSMContext, session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        try:
            bed_count = int(message.text)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–ø–∞–ª–µ–Ω.")
            return
        await state.update_data(number_of_bedrooms=bed_count)
        await state.update_data(current_bed=1)
        await state.set_state(UserState.info_bed)
        await state.update_data(last_question='–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–ê–ñ–î–û–ô —Å–ø–∞–ª—å–Ω–µ')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().agree_keyboard_about_bed())
        await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–ê–ñ–î–û–ô —Å–ø–∞–ª—å–Ω–µ', reply_markup=await kb.Custom_Keyboard().agree_keyboard_about_bed())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–π —Å–ø–∞–ª—å–Ω–µ
    @staticmethod
    @router.callback_query(UserState.info_bed, F.data=='got_it')
    async def handle_info_about_beds(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        current_bed = data.get('current_bed', 1)
        await state.set_state(UserState.bedroom_wc)
        await state.update_data(last_question=f'–í * {current_bed} * —Å–ø–∞–ª—å–Ω–µ —Å–≤–æ–π —Å–∞–Ω—É–∑–µ–ª?')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().number_of_wc_in_bedroom())
        await callback.message.answer(f'–í * {current_bed} * —Å–ø–∞–ª—å–Ω–µ —Å–≤–æ–π —Å–∞–Ω—É–∑–µ–ª?', reply_markup=await kb.Custom_Keyboard().number_of_wc_in_bedroom())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–Ω—É–∑–ª–µ –≤ —Å–ø–∞–ª—å–Ω–µ
    @staticmethod
    @router.callback_query(UserState.bedroom_wc, F.data.in_(['yes_wc_bed', 'no_wc_bed', 'wc_bed_back']))
    async def handle_wc_info(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        current_bed = data.get('current_bed', 1)

        if callback.data == 'wc_bed_back':
            await state.set_state(UserState.bedroom_area)
            await state.update_data(last_question='–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–ê–ñ–î–û–ô —Å–ø–∞–ª—å–Ω–µ')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().agree_keyboard_about_bed())
            await callback.message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–ê–ñ–î–û–ô —Å–ø–∞–ª—å–Ω–µ', reply_markup=await kb.Custom_Keyboard().agree_keyboard_about_bed())
            return

        wc_status = '—Å–≤–æ–π —Å–∞–Ω—É–∑–µ–ª' if callback.data == 'yes_wc_bed' else '–Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–Ω—É–∑–ª–∞'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–Ω—É–∑–ª–µ —Ç–µ–∫—É—â–µ–π —Å–ø–∞–ª—å–Ω–∏
        await state.update_data(**{f'bedroom_{current_bed}_wc': wc_status})
        await state.set_state(UserState.bedroom_type)
        await state.update_data(last_question='–ö–∞–∫–æ–π —Ç–∏–ø —ç—Ç–æ–π —Å–ø–∞–ª—å–Ω–∏?')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().type_of_bedroom())
        await callback.message.answer('–ö–∞–∫–æ–π —Ç–∏–ø —ç—Ç–æ–π —Å–ø–∞–ª—å–Ω–∏?', reply_markup=await kb.Custom_Keyboard().type_of_bedroom())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–∞–ª—å–Ω–∏
    @staticmethod
    @router.callback_query(UserState.bedroom_type,  F.data.in_(['master', 'guest', 'kids', 'type_back']))
    async def handle_type_info(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        current_bed = data.get('current_bed', 1)
        
        if callback.data == 'type_back':
            await state.set_state(UserState.bedroom_wc)
            await state.update_data(last_question=f'–í * {current_bed} * —Å–ø–∞–ª—å–Ω–µ —Å–≤–æ–π —Å–∞–Ω—É–∑–µ–ª?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().number_of_wc_in_bedroom())
            await callback.message.answer(f'–í * {current_bed} * —Å–ø–∞–ª—å–Ω–µ —Å–≤–æ–π —Å–∞–Ω—É–∑–µ–ª?', reply_markup=await kb.Custom_Keyboard().number_of_wc_in_bedroom())
            return

        if callback.data == 'master':
            type_status = '–ú–∞—Å—Ç–µ—Ä —Å–ø–∞–ª—å–Ω—è'
        elif callback.data == 'guest':
            type_status = '–ì–æ—Å—Ç–µ–≤–∞—è —Å–ø–∞–ª—å–Ω—è'
        else:
            type_status = '–î–µ—Ç—Å–∫–∞—è —Å–ø–∞–ª—å–Ω—è'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ç–µ–∫—É—â–µ–π —Å–ø–∞–ª—å–Ω–∏
        await state.update_data(**{f'bedroom_{current_bed}_type': type_status})
        await state.set_state(UserState.bedroom_view)
        await state.update_data(last_question='–û–ø–∏—à–∏—Ç–µ –≤–∏–¥ –∏–∑ —ç—Ç–æ–π —Å–ø–∞–ª—å–Ω–∏\n\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n–ü—Ä–∏–º–µ—Ä 1 - –í–∏–¥ –Ω–∞ –ø–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞, –ü–∞—Ä–∫ –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏, —Å–æ–ª–Ω–µ—á–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –û–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –≤ —Ç–∏—Ö–∏–π –∑–µ–ª–µ–Ω—ã–π –¥–≤–æ—Ä, –≤–∏–¥–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞\n–ü—Ä–∏–º–µ—Ä 3 - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.update_data(last_keyboard=None)
        await callback.message.answer('–û–ø–∏—à–∏—Ç–µ –≤–∏–¥ –∏–∑ —ç—Ç–æ–π —Å–ø–∞–ª—å–Ω–∏\n\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n–ü—Ä–∏–º–µ—Ä 1 - –í–∏–¥ –Ω–∞ –ø–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞, –ü–∞—Ä–∫ –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏, —Å–æ–ª–Ω–µ—á–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –û–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –≤ —Ç–∏—Ö–∏–π –∑–µ–ª–µ–Ω—ã–π –¥–≤–æ—Ä, –≤–∏–¥–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞\n–ü—Ä–∏–º–µ—Ä 3 - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')

    @staticmethod
    @router.message(UserState.bedroom_view)
    async def handle_view_from_bedroom(message: Message, state: FSMContext, session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        data = await state.get_data()
        current_bed = data.get('current_bed', 1)
        bed_count = data.get('number_of_bedrooms', 1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–ø–∞–ª—å–Ω–∏
        await state.update_data(**{f'bedroom_{current_bed}_view': message.text})

        if current_bed < bed_count: # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ø–∞–ª–µ–Ω
            current_bed += 1
            await state.update_data(current_bed=current_bed)
            await state.set_state(UserState.bedroom_wc)
            await state.update_data(last_question=f'–í * {current_bed} * —Å–ø–∞–ª—å–Ω–µ —Å–≤–æ–π —Å–∞–Ω—É–∑–µ–ª?')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().number_of_wc_in_bedroom())
            await message.answer(f'–í * {current_bed} * —Å–ø–∞–ª—å–Ω–µ —Å–≤–æ–π —Å–∞–Ω—É–∑–µ–ª?', reply_markup=await kb.Custom_Keyboard().number_of_wc_in_bedroom())
        else:
            await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–ø–∞–ª—å–Ω—è—Ö, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ‚ù§Ô∏è', reply_markup=await kb.Custom_Keyboard().agree_keyboard_back_to_flat())
            await state.update_data(last_question='–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—É—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=await kb.Custom_Keyboard().agree_keyboard_back_to_flat())
            
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    @staticmethod
    @router.callback_query(F.data=='okay')
    async def handle_info_about_beds(callback: CallbackQuery, state: FSMContext):
        await state.set_state(UserState.flat_view)
        await state.update_data(last_question='–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—É—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.update_data(last_keyboard=None)
        await callback.message.answer('–û–ø–∏—à–∏—Ç–µ –∫—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã(–≤–∏–¥—ã). –ù–ï –û–ü–ò–°–´–í–ê–ô–¢–ï –í–ò–î–´ –ò–ó –°–ü–ê–õ–ï–ù!!!!!\n\n–ü—Ä–∏–º–µ—Ä 1 - –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –°–∞–≤–∏–Ω—É—Å–∫—É—é –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é\n–ü—Ä–∏–º–µ—Ä 2 - –≤–∏–¥–Ω–æ –∫—Ä–µ–º–ª—å –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
    
    # –õ–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ –∏–∑ –æ–∫–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã
    @staticmethod
    @router.message(UserState.flat_view)
    async def handle_view_from_flat(message: Message, state: FSMContext, session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(flat_view=f"–í–∏–¥—ã –∏–∑ –æ–∫–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã: {message.text}")
        await state.set_state(UserState.flat_area)
        await state.update_data(last_question='–£–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - 57,2\n–ü—Ä–∏–º–µ—Ä 2 - 68\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.update_data(last_keyboard=None)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - 57,2\n–ü—Ä–∏–º–µ—Ä 2 - 68\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
    
    # –õ–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    @staticmethod
    @router.message(UserState.flat_area)
    async def handle_flat_area(message: Message, state: FSMContext, session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(flat_area=f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {message.text}")
        await state.set_state(UserState.price)
        await state.update_data(last_question='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É\n')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().type_of_price())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É\n', reply_markup=await kb.Custom_Keyboard().type_of_price())
    
    # –õ–æ–≤–∏–º –≤–∞–ª—é—Ç—É —Ü–µ–Ω—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ FSM
    @staticmethod
    @router.callback_query(UserState.price, F.data.in_(['rub', 'usd', 'rub/usd', 'money_back']))
    async def handle_number_of_value_price(callback: CallbackQuery, state: FSMContext):
        text_for_price = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n'
        
        value_map = {
            'rub': f'{text_for_price}–ü—Ä–∏–º–µ—Ä 1 - 120 000 000\n–ü—Ä–∏–º–µ—Ä 2 - 258 900 000\n–ü—Ä–∏–º–µ—Ä 3 - –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è',
            'usd': f'{text_for_price}–ü—Ä–∏–º–µ—Ä 1 - 120 000\n–ü—Ä–∏–º–µ—Ä 2 - 258 900\n–ü—Ä–∏–º–µ—Ä 3 - –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è',
            'rub/usd': f'{text_for_price}–ü—Ä–∏–º–µ—Ä 1 - 12 000 000/13 6426.42\n–ü—Ä–∏–º–µ—Ä 2 - 25 890 000/29 4340.01\n–ü—Ä–∏–º–µ—Ä 3 - –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'
        }
        
        if callback.data in value_map:
            await state.update_data(price=f'–í–∞–ª—é—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {callback.data}')
            await state.set_state(UserState.price_int)
            await state.update_data(last_question=f'{value_map[callback.data]}')
            await state.update_data(last_keyboard=None)
            await callback.message.answer(f'{value_map[callback.data]}')

        elif callback.data == "money_back":
            await state.set_state(UserState.flat_area)
            await state.update_data(last_question='–£–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - 57,2\n–ü—Ä–∏–º–µ—Ä 2 - 68\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
            await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - 57,2\n–ü—Ä–∏–º–µ—Ä 2 - 68\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
    
    # –õ–æ–≤–∏–º —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã —Ü–∏—Ñ—Ä–∞–º–∏
    @staticmethod
    @router.message(UserState.price_int)
    async def handle_flat_price(message: Message, state: FSMContext):
        price_text = message.text.replace(' ', '')
        if not price_text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 155 000 00.")
            return
        
        price_int = int(price_text)
        await state.update_data(price_int=f"–¶–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {price_int:,}".replace(',', ' '))  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        
        await state.set_state(UserState.flat_details)
        await state.update_data(last_question='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö –∏ –ø–ª—é—Å–∞—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - –î–æ —Ü–µ–Ω—Ç—Ä–∞ 10 –º–∏–Ω—É—Ç, —Ç—Ä–∏ –ø–∞—Ä–∫–∞ —Ä—è–¥–æ–º, –≤ –¥–æ–º–µ 4 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç 2 –º\–º, –í–∏–¥–Ω–æ –º–æ—Å–∫–≤—É —Å–∏—Ç–∏, –¥–æ –º–µ—Ç—Ä–æ 2 –º–∏–Ω—É—Ç—ã, –∫–æ–Ω—Å—å–µ—Ä–∂\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú !!')
        await state.update_data(last_keyboard=None)
        await message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö –∏ –ø–ª—é—Å–∞—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - –î–æ —Ü–µ–Ω—Ç—Ä–∞ 10 –º–∏–Ω—É—Ç, —Ç—Ä–∏ –ø–∞—Ä–∫–∞ —Ä—è–¥–æ–º, –≤ –¥–æ–º–µ 4 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç 2 –º\–º, –í–∏–¥–Ω–æ –º–æ—Å–∫–≤—É —Å–∏—Ç–∏, –¥–æ –º–µ—Ç—Ä–æ 2 –º–∏–Ω—É—Ç—ã, –∫–æ–Ω—Å—å–µ—Ä–∂\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú !!')

    # –õ–æ–≤–∏–º –¥–µ—Ç–∞–ª–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    @staticmethod
    @router.message(UserState.flat_details)
    async def handle_flat_details(message: Message, state: FSMContext,session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        await state.update_data(flat_details=f"–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∏ –ø–ª—é—Å—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã: {message.text}")
        await state.set_state(UserState.jk_info_yes_or_no)  # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        await state.update_data(last_question='–ü—Ä–µ–∂–¥–µ —á–µ–º —è –±—É–¥—É –±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ñ–ö/–¥–æ–º–µ —Å —Å–∞–π—Ç–∞ –¶–ò–ê–ù, –Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —É—Ç–æ—á–Ω–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –¶–ò–ê–ù –æ –≤–∞—à–µ–º –ñ–ö/–¥–æ–º–µ?')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().find_out_info_about_jk())
        await message.answer('–ü—Ä–µ–∂–¥–µ —á–µ–º —è –±—É–¥—É –±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ñ–ö/–¥–æ–º–µ —Å —Å–∞–π—Ç–∞ –¶–ò–ê–ù, –Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —É—Ç–æ—á–Ω–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –¶–ò–ê–ù –æ –≤–∞—à–µ–º –ñ–ö/–¥–æ–º–µ?', reply_markup=await kb.Custom_Keyboard().find_out_info_about_jk())

    
    # –õ–æ–≤–∏–º —Å—Å—ã–ª–∫–∏ —Å –¶–∏–∞–Ω–∞ —Å –ñ–ö
    @staticmethod
    @router.message(UserState.link_house)
    async def handle_link_of_house(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        url_pattern = r'^https:\/\/[\w-]+\.cian\.ru.*$'
        if re.match(url_pattern, message.text):
            await state.update_data(link_house=message.text)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            print(message.text)
            await state.set_state(UserState.jk_extra_info)
            await state.update_data(last_question='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–µ—Å—Ç—å –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö/–¥–æ–º–∞\n\n–ü—Ä–∏–º–µ—Ä 1 - –¥–æ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ 1957 –≥–æ–¥—É, –≤ –Ω–µ–º –∂–∏–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∞–∫—Ç–µ—Ä\n–ü—Ä–∏–º–µ—Ä 2 - –Ω–µ—Ç —Ç–∞–∫–æ–π\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
            await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–µ—Å—Ç—å –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö/–¥–æ–º–∞\n\n–ü—Ä–∏–º–µ—Ä 1 - –¥–æ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ 1957 –≥–æ–¥—É, –≤ –Ω–µ–º –∂–∏–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∞–∫—Ç–µ—Ä\n–ü—Ä–∏–º–µ—Ä 2 - –Ω–µ—Ç —Ç–∞–∫–æ–π\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ https://zhk-skyview-i.cian.ru')

    # –õ–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ –¶–ò–ê–ù
    @staticmethod
    @router.callback_query(UserState.jk_info_yes_or_no, F.data.in_(['yes_jk', 'no_jk', 'jk_back']))
    async def handle_info_about_jk(callback: CallbackQuery, state: FSMContext):
        if callback.data == 'yes_jk':
            await state.set_state(UserState.link_house)
            await state.update_data(last_question='–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É —Å –¶–ò–ê–ù —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ñ–ö, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞')
            await state.update_data(last_keyboard=None)
            await callback.message.answer('–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Å—ã–ª–∫—É —Å –¶–ò–ê–ù —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ñ–ö, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞')
        elif callback.data == 'no_jk':
            await state.update_data(link_house='')  # –û—á–∏—Å—Ç–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ –Ω–∞ –ñ–ö
            await state.set_state(UserState.jk_written_info)
            await state.update_data(last_question='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ñ–ö/–¥–æ–º–µ\n\n–ü—Ä–∏–º–µ—Ä 1 - –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –ø–∞—Ä–∫–∞ –ì–æ—Ä—å–∫–æ–≥–æ, –º–µ—Ç—Ä–æ —Ä—è–¥–æ–º, 7 —ç—Ç–∞–∂–µ–π\n–ü—Ä–∏–º–µ—Ä 2 - —è –Ω–µ –∑–Ω–∞—é/–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n–ü—Ä–∏–º–µ—Ä 3 - –≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω—ã–π –∂–∫ —Å –≤–∏–¥–æ–º –Ω–∞ –ú–æ—Å–∫–≤—É —Ä–µ–∫—É, –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç –∏ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ Sminex\n–ü—Ä–∏–º–µ—Ä 4 - –Ω–µ –∑–Ω–∞—é –¥–µ—Ç–∞–ª–µ–π\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
            await state.update_data(last_keyboard=None)
            await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ñ–ö/–¥–æ–º–µ\n\n–ü—Ä–∏–º–µ—Ä 1 - –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –ø–∞—Ä–∫–∞ –ì–æ—Ä—å–∫–æ–≥–æ, –º–µ—Ç—Ä–æ —Ä—è–¥–æ–º, 7 —ç—Ç–∞–∂–µ–π\n–ü—Ä–∏–º–µ—Ä 2 - —è –Ω–µ –∑–Ω–∞—é/–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n–ü—Ä–∏–º–µ—Ä 3 - –≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω—ã–π –∂–∫ —Å –≤–∏–¥–æ–º –Ω–∞ –ú–æ—Å–∫–≤—É —Ä–µ–∫—É, –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç –∏ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ Sminex\n–ü—Ä–∏–º–µ—Ä 4 - –Ω–µ –∑–Ω–∞—é –¥–µ—Ç–∞–ª–µ–π\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        elif callback.data == 'jk_back':
            await state.set_state(UserState.flat_details)
            await state.update_data(last_question='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö –∏ –ø–ª—é—Å–∞—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - –î–æ —Ü–µ–Ω—Ç—Ä–∞ 10 –º–∏–Ω—É—Ç, —Ç—Ä–∏ –ø–∞—Ä–∫–∞ —Ä—è–¥–æ–º, –≤ –¥–æ–º–µ 4 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç 2 –º\–º, –í–∏–¥–Ω–æ –º–æ—Å–∫–≤—É —Å–∏—Ç–∏, –¥–æ –º–µ—Ç—Ä–æ 2 –º–∏–Ω—É—Ç—ã, –∫–æ–Ω—Å—å–µ—Ä–∂\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú !!')
            await state.update_data(last_keyboard=None)
            await callback.message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞—Ö –∏ –ø–ª—é—Å–∞—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - –î–æ —Ü–µ–Ω—Ç—Ä–∞ 10 –º–∏–Ω—É—Ç, —Ç—Ä–∏ –ø–∞—Ä–∫–∞ —Ä—è–¥–æ–º, –≤ –¥–æ–º–µ 4 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä 2 - –í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç 2 –º\–º, –í–∏–¥–Ω–æ –º–æ—Å–∫–≤—É —Å–∏—Ç–∏, –¥–æ –º–µ—Ç—Ä–æ 2 –º–∏–Ω—É—Ç—ã, –∫–æ–Ω—Å—å–µ—Ä–∂\n–ü—Ä–∏–º–µ—Ä 3 - —è –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú !!')

    # –õ–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∫\–¥–æ–º–µ, –≤–≤–µ–¥–µ–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é
    @staticmethod
    @router.message(UserState.jk_written_info)
    async def handle_written_jk(message: Message, state: FSMContext, session:AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(jk_written_info = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∫: {message.text}')
        await state.set_state(UserState.jk_extra_info)
        await state.update_data(last_question='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–µ—Å—Ç—å –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö/–¥–æ–º–∞\n\n–ü—Ä–∏–º–µ—Ä 1 - –¥–æ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ 1957 –≥–æ–¥—É, –≤ –Ω–µ–º –∂–∏–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∞–∫—Ç–µ—Ä\n–ü—Ä–∏–º–µ—Ä 2 - –Ω–µ—Ç —Ç–∞–∫–æ–π\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.update_data(last_keyboard=None)
        await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–µ—Å—Ç—å –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö/–¥–æ–º–∞\n\n–ü—Ä–∏–º–µ—Ä 1 - –¥–æ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ 1957 –≥–æ–¥—É, –≤ –Ω–µ–º –∂–∏–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∞–∫—Ç–µ—Ä\n–ü—Ä–∏–º–µ—Ä 2 - –Ω–µ—Ç —Ç–∞–∫–æ–π\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!') 

    # –õ–æ–≤–∏–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∫
    @staticmethod
    @router.message(UserState.jk_extra_info)
    async def handle_extra_info_about_jk(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(jk_extra_info = f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–µ—Å—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ñ–ö: {message.text}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        data = await state.get_data()
        link_house = data.get('link_house', '')
        print(link_house)
        jk_written_info = data.get('jk_written_info', '')
        print(jk_written_info)
        jk_extra_info = data.get('jk_extra_info', '')
        print(jk_extra_info)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö
        if link_house:
            info = link_house
        else:
            info = jk_written_info

        asyncio.create_task(DescriptionConstructorHandler.uniquely_describe_building(info, jk_extra_info, state))
        
        await state.set_state(UserState.info_about_extra_rooms)
        await state.update_data(last_question='–ï—Å–ª–∏ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏—Ö\n\n–ü—Ä–∏–º–µ—Ä 1 - –Ω–µ—Ç —Ç–∞–∫–∏—Ö/–Ω–µ—Ç\n–ü—Ä–∏–º–µ—Ä 2 - –µ—Å—Ç—å –ø–æ—Å—Ç–∏—Ä–æ—á–Ω–∞—è, –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è, –±–∞–ª–∫–æ–Ω\n–ü—Ä–∏–º–µ—Ä 3 - –ª–æ–¥–∂–∏—è, –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.update_data(last_keyboard=None)
        await message.answer('–ï—Å–ª–∏ –≤ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏—Ö\n\n–ü—Ä–∏–º–µ—Ä 1 - –Ω–µ—Ç —Ç–∞–∫–∏—Ö/–Ω–µ—Ç\n–ü—Ä–∏–º–µ—Ä 2 - –µ—Å—Ç—å –ø–æ—Å—Ç–∏—Ä–æ—á–Ω–∞—è, –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è, –±–∞–ª–∫–æ–Ω\n–ü—Ä–∏–º–µ—Ä 3 - –ª–æ–¥–∂–∏—è, –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')

    # –õ–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
    @staticmethod
    @router.message(UserState.info_about_extra_rooms)
    async def handle_info_about_extra_rooms(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(info_about_extra_rooms = f"–í –∫–≤–∞—Ä—Ç–∏—Ä–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: {message.text}")
        await state.set_state(UserState.flat_extra_info)
        await state.update_data(last_question="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º–Ω–µ —Å—Ç–æ–∏—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–µ—Å—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –ø—Ä–æ–∂–∏–≤–∞–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∞–∫—Ç–µ—Ä, –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–Ω–æ—Å –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Å—Ç–µ–Ω\n–ü—Ä–∏–º–µ—Ä 2 - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!")
        await state.update_data(last_keyboard=None)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º–Ω–µ —Å—Ç–æ–∏—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–µ—Å—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä 1 - –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –ø—Ä–æ–∂–∏–≤–∞–ª –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∞–∫—Ç–µ—Ä, –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Å–Ω–æ—Å –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Å—Ç–µ–Ω\n–ü—Ä–∏–º–µ—Ä 2 - –Ω–µ –∑–Ω–∞—é\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!")
    
    # –õ–æ–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ì–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
    @staticmethod
    @router.message(UserState.flat_extra_info)
    async def handle_extra_info_about_flat(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return
        
        if message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return
        
        await state.update_data(flat_extra_info = f'–ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–µ—Å—Ç—å {message.text}')
        await state.set_state(UserState.deal_term) # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        await state.update_data(last_question='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö —Å–¥–µ–ª–∫–∏. –£–ö–ê–ó–ê–¢–¨ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û\n\n–ü—Ä–∏–º–µ—Ä 1 - 1 –≤–∑—Ä–æ—Å–ª—ã–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫, –ø—Ä—è–º–∞—è –ø—Ä–æ–¥–∞–∂–∞\n–ü—Ä–∏–º–µ—Ä 2 - –¢–æ—Ä–≥, –≥–æ—Ç–æ–≤—ã –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ, –î–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
        await state.update_data(last_keyboard=None)
        await message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö —Å–¥–µ–ª–∫–∏. –£–ö–ê–ó–ê–¢–¨ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û\n\n–ü—Ä–∏–º–µ—Ä 1 - 1 –≤–∑—Ä–æ—Å–ª—ã–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫, –ø—Ä—è–º–∞—è –ø—Ä–æ–¥–∞–∂–∞\n–ü—Ä–∏–º–µ—Ä 2 - –¢–æ—Ä–≥, –≥–æ—Ç–æ–≤—ã –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ, –î–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫\n\n–í–í–û–î –û–°–£–©–ï–°–¢–í–õ–Ø–ï–¢–°–Ø –° –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–ï–ö–°–¢–û–ú –ö–ê–ö –í –ü–†–ò–ú–ï–†–ê–•!!')
    
    @staticmethod
    @router.message(UserState.deal_term)
    async def handle_deal_term(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üí∏ –ë–∞–ª–∞–Ω—Å":
            await BalanceHandler.handle_balance(message, state, session)
            return

        if message.text and message.text.startswith('/'):
            await DescriptionConstructorHandler.check_status(message, state)
            return

        await state.update_data(deal_term=f'–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ - {message.text}')

        # –∏–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        await state.update_data(last_question='–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–ø–∏—Å–∞–Ω–∏—è?')
        await state.update_data(last_keyboard=await kb.Custom_Keyboard().change_parametrs())
        await message.answer('–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–ø–∏—Å–∞–Ω–∏—è?', reply_markup=await kb.Custom_Keyboard().change_parametrs())

    @staticmethod
    @router.callback_query(F.data == 'generate_description')
    async def handle_generate_description(call: CallbackQuery, state: FSMContext, session: AsyncSession):
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        unique_description_of_building = data.get('unique_description_of_building', '')
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö
        if not unique_description_of_building:
            await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ñ–ö...')
            while not unique_description_of_building:
                await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                data = await state.get_data()
                unique_description_of_building = data.get('unique_description_of_building', '')
        
        flat_info, jk_info = await DescriptionConstructorHandler.collect_info_from_fsm(state)
        balance = await orm_get_user_balance(session, call.from_user.id)
        
        if int(balance) >= 0:
            await orm_update_users_balance(session=session, current_balance=balance-5, user_id=call.from_user.id)
            await orm_add_action_with_top_up(session=session, user_id=call.from_user.id, user_name=call.from_user.username, action=f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ -5 —Ä—É–±–ª–µ–π', top_up_amount=5)
            await call.message.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ó–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥!')
            await DescriptionConstructorHandler.create_unique_description_of_flat(flat_info, jk_info, state)
            await state.set_state(UserState.description_ready)
            await DescriptionConstructorHandler.send_description_to_user(call.message, state)

    @staticmethod
    @router.message(UserState.description_ready)
    async def send_description_to_user(message: Message, state: FSMContext):
        data = await state.get_data()
        
        flat_text = data.get('flat_text', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã:\n\n{flat_text}", reply_markup=await kb.Custom_Keyboard().stay_reload_function())
        
    @staticmethod
    @router.callback_query(F.data == 'reload')
    async def reload_post(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        count = (await state.get_data()).get('reload_count', 0) + 1
        await state.update_data(reload_count=count)

        await callback.message.answer('–ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ...–ó–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥')  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
        flat_info, jk_info = await DescriptionConstructorHandler.collect_info_from_fsm(state)  # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –∏–∑ user state
        flat_text = await create_description_of_flat(flat_info, jk_info)
        print(flat_text)
        await state.update_data(flat_text=flat_text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(flat_text, reply_markup=await kb.Custom_Keyboard().stay_reload_function())

        if count > 3:
            balance = await orm_get_user_balance(session, callback.from_user.id)
            if balance >= 0:
                await orm_update_users_balance(session=session, current_balance=balance-3, user_id=callback.from_user.id)
                await orm_add_action_with_top_up(session=session, user_id=callback.from_user.id, user_name=callback.from_user.username, action='–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ -3 —Ä—É–±–ª—è', top_up_amount=3)
            else:
                await callback.message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.')
                return

    @staticmethod
    @router.callback_query(F.data == 'stay')
    async def send_post_cian(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
        await callback.message.answer('–ù–∞–ø—Ä–∞–≤–ª—è—é –≤–∞–º –ø–æ—Å—Ç–∏–∫...')  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
        data = await state.get_data()  # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–∞ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∏–∑–º–µ–Ω–Ω–µ—ã–π —Ç–µ–∫—Å—Ç
        await callback.message.answer(data['flat_text'])
        balance = await orm_get_user_balance(session, callback.from_user.id)
                
        if balance>=50:
            await callback.message.answer('–†–∞–¥ –±—ã–ª –≤–∞–º –ø–æ–º–æ—á—å ‚ù§Ô∏è\n\n–î–∞–≤–∞–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ—â–µ –æ–¥–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –≤–∞–º–∏! –í–∞–º —Ç–∞–∫ –∂–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –≤—Å—ë –æ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ!', reply_markup=await kb.Custom_Keyboard().agree_keyboard())
            await state.clear()
        else:
            await callback.message.answer('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 100 —Ä—É–±–ª–µ–π!', 
                                parse_mode='Markdown')


    @router.message(Command('status'))
    async def check_status(message: Message, state: FSMContext):
        if message.chat.id != SUPPORT_CHAT_ID:
            current_state = await state.get_state()
            constructor_states = [
                UserState.number_of_rooms,
                UserState.renovation_status,
                UserState.style,
                UserState.info_about_renovation,
                UserState.kitchen_living_room,
                UserState.info_about_kitchen_living_room,
                UserState.number_of_closet,
                UserState.number_of_bedrooms,
                UserState.info_bed,
                UserState.bedroom_area,
                UserState.bedroom_wc,
                UserState.bedroom_type,
                UserState.bedroom_view,
                UserState.bedroom_details,
                UserState.flat_view,
                UserState.flat_area,
                UserState.price,
                UserState.price_int,
                UserState.flat_details,
                UserState.link_house,
                UserState.jk_info_yes_or_no,
                UserState.jk_extra_info,
                UserState.jk_written_info,
                UserState.info_about_extra_rooms,
                UserState.flat_extra_info,
                UserState.deal_term,
                UserState.description_ready,
                UserState.changing_parameters,  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                UserState.awaiting_new_value  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            ]

            if current_state not in constructor_states:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ /status –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è.")
                return
            
            data = await state.get_data()
            responses = []
            responses.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('number_of_rooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞: {data.get('renovation_status', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–°—Ç–∏–ª—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('style', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–†–µ–º–æ–Ω—Ç –∏ –º–µ–±–µ–ª—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('info_about_renovation', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–ö—É—Ö–Ω—è —Å–æ–≤–º–µ—â–µ–Ω–∞ —Å –≥–æ—Å—Ç–∏–Ω–æ–π: {data.get('kitchen_living_room', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ö–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π: {data.get('info_about_kitchen_living_room', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤: {data.get('number_of_closet', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω: {data.get('number_of_bedrooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")

            if data.get('number_of_bedrooms', 0) > 0:
                bed_count = int(data.get('number_of_bedrooms', 0))
                bedrooms_info = [
                    f"–°–ø–∞–ª—å–Ω—è {i + 1}: –°–∞–Ω—É–∑–µ–ª - {data.get(f'bedroom_{i+1}_wc', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n, –¢–∏–ø - {data.get(f'bedroom_{i+1}_type', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n, –í–∏–¥ –∏–∑ —Å–ø–∞–ª—å–Ω–∏ - {data.get(f'bedroom_{i+1}_view', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                    for i in range(bed_count)
                ]
                responses.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞–ª—å–Ω—è—Ö:\n" + "\n".join(bedrooms_info))
            else:
                responses.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–∞–ª—å–Ω—è—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞.\n")

            responses.append(f"–í–∏–¥—ã –∏–∑ –æ–∫–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_view', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_area', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–í–∞–ª—é—Ç–∞ —Ü–µ–Ω—ã: {data.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–¶–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('price_int', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∏ –ø–ª—é—Å—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_details', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ñ–ö: {data.get('link_house', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ñ–ö: {data.get('jk_written_info', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–í–ê–ñ–ù–´–ï –∑–∞–º–µ—á–∞–Ω–∏—è –æ –ñ–ö: {data.get('jk_extra_info', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('info_about_extra_rooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–í–ê–ñ–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {data.get('flat_extra_info', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–û–ø–∏—Å–∞–Ω–∏–µ –∂–∫ –ø–æ—Å–ª–µ gpt: {data.get('unique_description_of_building', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            responses.append(f"–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏: {data.get('deal_term', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")

            await message.answer("\n".join(responses))

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, –≤–æ–ø—Ä–æ—Å—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            last_question = data.get('last_question', None)
            last_keyboard = data.get('last_keyboard', None)
            
            if last_question:
                if last_keyboard:
                    await message.answer(last_question, reply_markup=last_keyboard)
                else:
                    await message.answer(last_question)
            
            await state.set_state(current_state)
        else:
            await message.answer('–í –ø–æ–¥–¥–µ—Ä–∂–∫–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ü•∫\n\n–ó–¥–µ—Å—å –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /admin')

    @staticmethod
    @router.message(Command('help'), F.text.not_in(["–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ"]) )
    async def show_help(message: Message):
        await message.answer('/start - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/status - –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –æ–ø–∏—Å–∞–Ω–∏—è\n\n–ö–ù–û–ü–ö–ê –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –û–ø–∏—Å–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')