import json
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from app.states import UserState
from database.orm_query import orm_add_action_with_ideas, orm_add_action_with_question, orm_delete_user_question, orm_get_all_ideas, orm_get_all_questions, orm_get_user_question
import keyboard.keyboard as kb
from aiogram.filters.command import Command
from config_reader import config
from app.support.support_state import SupportState
from aiogram.filters.command import CommandObject

support_router = Router()

SUPPORT_CHAT_ID = int(config.support_chat_id.get_secret_value())
BOT_CHAT_ID = int(config.bot_chat_id.get_secret_value())
print(SUPPORT_CHAT_ID)
print(BOT_CHAT_ID)

class AdminSupport:
    
    _user_names = None  # –ö–ª–∞—Å—Å-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    @classmethod
    async def load_user_names(cls):
        if cls._user_names is None:
            with open('database/user_names_for_access.json', encoding='UTF-8') as f:
                cls._user_names = json.load(f)

    @staticmethod
    @support_router.message(F.text.in_(["üíå –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / QA"]))
    async def handle_support_module(message: Message, state: FSMContext, session: AsyncSession):
        current_state = await state.get_state()

        constructor_states = [
            UserState.number_of_rooms,
            UserState.renovation_status,
            UserState.waiting_for_room_count,
            UserState.style,
            UserState.info_about_renovation,
            UserState.kitchen_living_room,
            UserState.info_about_kitchen_living_room,
            UserState.number_of_closet,
            UserState.number_of_bedrooms,
            UserState.waiting_for_bedrooms_count,
            UserState.info_bed,
            UserState.bedroom_area,
            UserState.bedroom_wc,
            UserState.bedroom_type,
            UserState.bedroom_view,
            UserState.bedroom_details,
            UserState.flat_view,
            UserState.flat_area,
            UserState.price,
            UserState.price_int,
            UserState.flat_details,
            UserState.link_house,
            UserState.jk_info_yes_or_no,
            UserState.jk_extra_info,
            UserState.jk_written_info,
            UserState.info_about_extra_rooms,
            UserState.flat_extra_info,
            UserState.deal_term,
            UserState.description_ready
        ]

        if current_state in constructor_states:
            await message.answer(f'‚ö†Ô∏è –í–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ù–ï–õ–¨–ó–Ø —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n–í—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!!!!\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–∏–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –ª–∏–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–∂–∏–º –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ ‚ù§Ô∏è')

            data = await state.get_data()
            last_question = data.get('last_question', None)
            last_keyboard = data.get('last_keyboard', None)

            if last_question:
                if last_keyboard:
                    await message.answer(last_question, reply_markup=last_keyboard)
                else:
                    await message.answer(last_question)

            await state.set_state(current_state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        else:
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º
            await message.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –î–µ–π–ª üõ† \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∞–º —Ä–∞–∑–¥–µ–ª –º–æ–¥—É–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üìù', reply_markup=await kb.Custom_Keyboard().support_keyboard_chose())

    @staticmethod
    @support_router.message(F.text.in_(["üì® –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / QA", 'üìö –ü—Ä–æ –Ω–∞—Å / –í–∞–∫–∞–Ω—Å–∏–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º']))
    async def handle_support_variant(message: Message, state: FSMContext, session: AsyncSession):
        if message.text == "üì® –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ / QA":
            await message.answer('–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?', reply_markup=await kb.Custom_Keyboard().support_variant())
        elif message.text == 'üìö –ü—Ä–æ –Ω–∞—Å / –í–∞–∫–∞–Ω—Å–∏–∏':
            await message.answer('–ú—ã –ª—É—á—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ PEOPLE\n\n–í—Å–µ –∞–∫—Ç—É–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ `https://hh.ru/employer/4683947`')
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º':
            await message.answer('–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∏–¥–µ–∏ –∏–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ!', reply_markup=await kb.Custom_Keyboard().main_keyboard(message.from_user.username))

    @staticmethod
    @support_router.callback_query(F.data.in_(['developer_qa', 'seo_qa']))
    async def handle_kind_of_admins(call: CallbackQuery, state: FSMContext, session: AsyncSession):
        if call.data == 'developer_qa':
            await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=await kb.Custom_Keyboard().support_options_developer())
        elif call.data == 'seo_qa':
            await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=await kb.Custom_Keyboard().support_options_seo())

    @staticmethod
    @support_router.callback_query(F.data.in_(["question", 'idea', 'support_back']))
    async def handle_client_choosing(call: CallbackQuery, state: FSMContext, session: AsyncSession):
        if call.data == "question":
            await state.set_state(SupportState.question_to_developer)
            await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≥—Ä–∞–º–æ—Ç–Ω–æ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ.\n\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∏ –ø—Ä–∏—à–ª—é –æ—Ç–≤–µ—Ç –≤ –±–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è ‚ù§Ô∏è')
        elif call.data == 'idea':
            await state.set_state(SupportState.idea_to_developer)
            await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≥—Ä–∞–º–æ—Ç–Ω–æ —Å–≤–æ—é –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–ª–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Ñ–∏—á–µ–π –≤ –±–æ—Ç‚ù§Ô∏è')
        elif call.data == 'support_back':
            await call.message.answer('–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?', reply_markup=await kb.Custom_Keyboard().support_variant())
    
    @staticmethod
    @support_router.message(SupportState.question_to_developer)
    async def handle_question_to_developer(message: Message, state: FSMContext, session: AsyncSession):
        
        await state.update_data(question_to_developer=message.text)
        await message.answer('–ü–µ—Ä–µ–¥–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ –±–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è üíå\n\n–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?', reply_markup=await kb.Custom_Keyboard().support_variant())
        
        data = await state.get_data()
        to_admin_chat = f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {data['question_to_developer']}\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {message.message_id}"
        await AdminSupport.send_to_group(message, to_admin_chat)
        await orm_add_action_with_question(session=session, user_id=message.from_user.id,chat_id=message.chat.id, message_id=message.message_id, user_name=message.from_user.username,question=data['question_to_developer'], for_who='—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')

    @staticmethod
    @support_router.message(SupportState.idea_to_developer)
    async def handle_idea_to_developer(message: Message, state: FSMContext, session: AsyncSession):
        await state.update_data(idea_to_developer=message.text)
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–¥–µ—é –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—á—Ç—É—Ç –≤—Å–µ –≤–∞—à–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è! üíå\n\n–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?', reply_markup=await kb.Custom_Keyboard().support_variant())
        
        data = await state.get_data()
        to_admin_chat = f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å–≤–æ—é –∏–¥–µ—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {data['idea_to_developer']}"
        await AdminSupport.send_to_group(message, to_admin_chat)
        await orm_add_action_with_ideas(session=session, user_id=message.from_user.id,chat_id=message.chat.id, user_name=message.from_user.username, idea=data['idea_to_developer'], for_who='—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')
        
    @staticmethod
    @support_router.callback_query(F.data.in_(["question_seo", 'idea_seo', 'support_back_seo']))
    async def handle_client_choosing_seo(call: CallbackQuery, state: FSMContext, session: AsyncSession):
        if call.data == "question_seo":
            await state.set_state(SupportState.question_to_seo)
            await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≥—Ä–∞–º–æ—Ç–Ω–æ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ.\n\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∏ –ø—Ä–∏—à–ª—é –æ—Ç–≤–µ—Ç –≤ –±–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è ‚ù§Ô∏è')
        elif call.data == 'idea_seo':
            await state.set_state(SupportState.idea_to_seo)
            await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≥—Ä–∞–º–æ—Ç–Ω–æ —Å–≤–æ—é –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–ª–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Ñ–∏—á–µ–π –≤ –±–æ—Ç‚ù§Ô∏è')
        elif call.data == 'support_back_seo':
            await call.message.answer('–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?', reply_markup=await kb.Custom_Keyboard().support_variant())
    
    @staticmethod
    @support_router.message(SupportState.question_to_seo)
    async def handle_question_to_seo(message: Message, state: FSMContext, session: AsyncSession):
        await state.update_data(question_to_seo=message.text)
        await message.answer('–ü–µ—Ä–µ–¥–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ –±–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è üíå\n\n–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?', reply_markup=await kb.Custom_Keyboard().support_variant())
        
        data = await state.get_data()
        to_admin_chat = f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {data['question_to_seo']}\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞: `{message.message_id}` ?"
        await AdminSupport.send_to_group(message, to_admin_chat)
        await orm_add_action_with_ideas(session=session, user_id=message.from_user.id,message_id=message.message_id, user_name=message.from_user.username, idea=data['question_to_seo'], for_who='—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å')

    @staticmethod
    @support_router.message(SupportState.idea_to_seo)
    async def handle_idea_to_seo(message: Message, state: FSMContext, session: AsyncSession):
        await state.update_data(idea_to_seo=message.text)
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–¥–µ—é –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! SEO –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –≤–∞—à–µ–π –∏–¥–µ–µ–π –∏ –¥–æ—Ä–∞–±–æ—Ç–∞—é—Ç –º–µ–Ω—è! üíå\n\n–° –∫–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?', reply_markup=await kb.Custom_Keyboard().support_variant())
        
        data = await state.get_data()
        to_admin_chat = f"–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å–≤–æ—é –∏–¥–µ—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {data['idea_to_seo']}"
        await AdminSupport.send_to_group(message, to_admin_chat)
        await orm_add_action_with_ideas(session=session, user_id=message.from_user.id, user_name=message.from_user.username, idea=data['idea_to_seo'], for_who='—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å')
    
    @staticmethod
    async def send_to_group(message: Message, text: str, chat_id=SUPPORT_CHAT_ID):
        try:
            await message.bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
    @staticmethod
    @support_router.message(Command("–æ—Ç–≤–µ—Ç"))
    async def start_reply(message: Message, command: CommandObject, state: FSMContext, session: AsyncSession):
        if message.chat.id == SUPPORT_CHAT_ID:
            command_args = command.args.split(maxsplit=1)
            if len(command_args) < 2:
                await message.answer('‚ö† –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: `/–æ—Ç–≤–µ—Ç 516712732 –í–∞—à –æ—Ç–≤–µ—Ç`')
                return

            original_message_id = int(command_args[0])
            response_text = command_args[1]
            
            user_question = await orm_get_user_question(session=session, message_id=original_message_id)  # –ø–æ–ª—É—á–∞–µ–º chat_id –∏ –≤–æ–ø—Ä–æ—Å –ø–æ id

            if user_question:
                chat_id, question = user_question
                await message.bot.send_message(chat_id=int(chat_id), text=f"‚úâ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n–í—ã —Ä–∞–Ω–µ–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: \n\n`{question}`.\n\n –û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n`{response_text}`", parse_mode='Markdown')
                await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ!")
                await orm_delete_user_question(session=session, message_id=original_message_id)  # —É–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID')
        else:
            await message.answer('–ù–µ —Ç–æ—Ç —á–∞—Ç')

    @staticmethod
    @support_router.message(Command("get_chat_id"))
    async def get_chat_id(message: Message, command: CommandObject):
        chat_id = message.chat.id
        await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–¥ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    async def get_and_send_questions(message: Message, session: AsyncSession, for_who: str, allowed_users: list):
        
        if message.chat.id == SUPPORT_CHAT_ID and message.from_user.username in allowed_users:
            data = await orm_get_all_questions(session=session, for_who=for_who)
            for option in data:
                user_name, message_id, question = option
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å {for_who}—É: `{question}`\n\nID –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Message ID: {message_id}')
        else:
            await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ‚ù§Ô∏è")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–¥ –∏–¥–µ–π –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    async def get_and_send_ideas(message: Message, session: AsyncSession, for_who: str, allowed_users: list):
        
        if message.chat.id == SUPPORT_CHAT_ID and message.from_user.username in allowed_users:
            
            data = await orm_get_all_ideas(session=session, for_who=for_who)
            for option in data:
                user_name, idea  = option
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} –ø—Ä–∏—Å–ª–∞–ª –∏–¥–µ—é –¥–ª—è {for_who}: `{idea}`\n\n')
        else:
            await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ‚ù§Ô∏è")
    
    @staticmethod
    @support_router.message(Command("question_developer"))
    async def question_developer(message: Message, session: AsyncSession):
        
        await AdminSupport.load_user_names()
        
        await AdminSupport.get_and_send_questions(message, session, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', AdminSupport._user_names['developer'])

    @staticmethod
    @support_router.message(Command("question_seo"))
    async def question_seo(message: Message, session: AsyncSession):
        
        await AdminSupport.load_user_names()
        
        await AdminSupport.get_and_send_questions(message, session, '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', AdminSupport._user_names['seo'])
        
    @staticmethod
    @support_router.message(Command("idea_developer"))
    async def idea_developer(message: Message, session: AsyncSession):
        await AdminSupport.load_user_names()
        await AdminSupport.get_and_send_ideas(message, session, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', AdminSupport._user_names['developer'])

    @staticmethod
    @support_router.message(Command("idea_seo"))
    async def idea_seo(message: Message, session: AsyncSession):
        await AdminSupport.load_user_names()
        await AdminSupport.get_and_send_ideas(message, session, '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', AdminSupport._user_names['seo'])
    
    @staticmethod
    @support_router.message(Command("admin"))
    async def idea_seo(message: Message, session: AsyncSession):
        
        await AdminSupport.load_user_names()
            
        if message.from_user.username in AdminSupport._user_names['admin'] and message.chat.id == SUPPORT_CHAT_ID:
            
            await message.answer("–£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–•.–ü–û–î–î–ï–†–ñ–ö–û–ô:\n\n"
                    "–ö–ê–ö –û–¢–í–ï–ß–ê–¢–¨ –ù–ê –í–û–ü–†–û–°:\n"
                    "–®–∞–±–ª–æ–Ω:\n\n"
                    "/–æ—Ç–≤–µ—Ç ID_—Å–æ–æ–±—â–µ–Ω–∏—è –í–ê–®_–û–¢–í–ï–¢\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n\n"
                    "`/–æ—Ç–≤–µ—Ç 7589 –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏`\n\n"
                    "–í–ê–ñ–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ú–û–ñ–ï–¢–ï –ù–ê–ñ–ò–ú–ê–¢–¨ –¢–û –ß–¢–û –í–ê–ú –ù–£–ñ–ù–û):\n\n"
                    "/question_developer - –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã , –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–£\n\n"
                    " /question_seo - –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã , –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –†–£–ö–û–í–û–î–ò–¢–ï–õ–Æ\n\n"
                    "/idea_developer - –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –∏–¥–µ–∏ , –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–£\n\n"
                    "/idea_seo - –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ –∏–¥–µ–∏ , –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –†–£–ö–û–í–û–î–ò–¢–ï–õ–Æ\n\n"
                    "–ß–¢–û-–¢–û –ó–ê–ë–´–õ–ò - –°–ú–û–¢–†–ò –ó–ê–ö–†–ï–ü ‚ù§Ô∏è")
        else:
            await message.answer('‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. –ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ª–∏ –≤—ã —á–∞—Ç–∏–∫–µ ‚ù§Ô∏è')